// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-mg/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, _a1
func (_m *UserService) CreateUser(ctx context.Context, _a1 model.Users) (model.Users, error) {
	ret := _m.Called(ctx, _a1)

	var r0 model.Users
	if rf, ok := ret.Get(0).(func(context.Context, model.Users) model.Users); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Users) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *UserService) DeleteUser(ctx context.Context, userID int64) (bool, error) {
	ret := _m.Called(ctx, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userId
func (_m *UserService) GetUserByID(ctx context.Context, userId int64) (model.Users, error) {
	ret := _m.Called(ctx, userId)

	var r0 model.Users
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Users); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(model.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, limit, lastID
func (_m *UserService) GetUsers(ctx context.Context, limit int, lastID int64) ([]model.Users, error) {
	ret := _m.Called(ctx, limit, lastID)

	var r0 []model.Users
	if rf, ok := ret.Get(0).(func(context.Context, int, int64) []model.Users); ok {
		r0 = rf(ctx, limit, lastID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int64) error); ok {
		r1 = rf(ctx, limit, lastID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, _a1, userID
func (_m *UserService) UpdateUser(ctx context.Context, _a1 model.Users, userID int64) (model.Users, error) {
	ret := _m.Called(ctx, _a1, userID)

	var r0 model.Users
	if rf, ok := ret.Get(0).(func(context.Context, model.Users, int64) model.Users); ok {
		r0 = rf(ctx, _a1, userID)
	} else {
		r0 = ret.Get(0).(model.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Users, int64) error); ok {
		r1 = rf(ctx, _a1, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
